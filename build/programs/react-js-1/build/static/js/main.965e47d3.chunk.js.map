{"version":3,"sources":["context.js","Todo/TodoItem.js","Todo/TodoList.js","Todo/AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","styles","li","display","justifyContent","alignItems","padding","borderRadius","border","marginBottom","backgroundColor","button","TodoItem","todo","index","onChange","removeTodo","useContext","classes","completed","push","style","className","join","type","id","checked","title","onClick","bind","ul","listStyle","margin","TodoList","props","todos","map","key","onToggle","input","width","marginRight","AddTodo","onCreate","defaultValue","useState","value","setValue","event","target","clear","useInputValue","onSubmit","preventDefault","trim","App","setTodos","Provider","filter","concat","Date","now","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.965e47d3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Context = React.createContext();\r\n\r\nexport default Context;\r\n","import React, { useContext } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Context from \"../context\";\r\n\r\nconst styles = {\r\n  li: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    padding: \"10px 20px\",\r\n    borderRadius: \"10px\",\r\n    border: \"1px solid #ccc\",\r\n    marginBottom: \"10px\",\r\n    backgroundColor: \"rgba(222, 184, 135, 0.2)\",\r\n  },\r\n  button: {\r\n    borderRadius: \"10px\",\r\n    padding: \"6px 12px\",\r\n  },\r\n};\r\n\r\nfunction TodoItem({ todo, index, onChange }) {\r\n  const { removeTodo } = useContext(Context);\r\n\r\n  const classes = [];\r\n\r\n  if (todo.completed) {\r\n    classes.push(\"done\");\r\n  }\r\n\r\n  return (\r\n    <li style={styles.li}>\r\n      <span className={classes.join(\" \")}>\r\n        <input type=\"checkbox\" onChange={() => onChange(todo.id)} checked={todo.completed}></input>\r\n        <strong> {index + 1} - </strong>\r\n        {todo.title}\r\n      </span>\r\n      {/* <button style={styles.button} onClick={() => removeTodo(todo.id)}>\r\n        X\r\n      </button> */}\r\n      <button style={styles.button} onClick={removeTodo.bind(null, todo.id)}>\r\n        X\r\n      </button>\r\n    </li>\r\n  );\r\n}\r\n\r\nTodoItem.propTypes = {\r\n  todo: PropTypes.object.isRequired,\r\n  index: PropTypes.number.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default TodoItem;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nconst styles = {\r\n  ul: {\r\n    listStyle: \"none\",\r\n    margin: 0,\r\n    padding: 0,\r\n  },\r\n};\r\n\r\nfunction TodoList(props) {\r\n  return (\r\n    <ul style={styles.ul}>\r\n      {props.todos.map((todo, index) => {\r\n        return <TodoItem todo={todo} index={index} key={todo.id} onChange={props.onToggle}></TodoItem>;\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n\r\nTodoList.propTypes = {\r\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  onToggle: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst styles = {\r\n  input: {\r\n    width: \"65%\",\r\n    alignItems: \"center\",\r\n    padding: \"10px 20px\",\r\n    borderRadius: \"10px\",\r\n    border: \"1px solid #ccc\",\r\n    marginBottom: \"10px\",\r\n    marginRight: \"10px\",\r\n    backgroundColor: \"rgba(222, 184, 135, 0.10)\",\r\n  },\r\n  button: {\r\n    width: \"20%\",\r\n    borderRadius: \"10px\",\r\n    padding: \"6px 12px\",\r\n  },\r\n};\r\n\r\nfunction useInputValue(defaultValue = \"\") {\r\n  const [value, setValue] = useState(defaultValue);\r\n  return {\r\n    bind: {\r\n      value,\r\n      onChange: (event) => setValue(event.target.value),\r\n    },\r\n    clear: () => setValue(\"\"),\r\n    value: () => value,\r\n  };\r\n}\r\n\r\nfunction AddTodo({ onCreate }) {\r\n  const input = useInputValue(\"\");\r\n\r\n  function submitHendler(event) {\r\n    event.preventDefault();\r\n\r\n    if (input.value().trim()) {\r\n      onCreate(input.value());\r\n\r\n      input.clear();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={submitHendler}>\r\n      <input style={styles.input} {...input.bind} />\r\n      <button style={styles.button} type=\"submit\">\r\n        Add Todo\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nAddTodo.propTypes = {\r\n  onCreate: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddTodo;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport TodoList from \"./Todo/TodoList\";\nimport Context from \"./context\";\nimport AddTodo from \"./Todo/AddTodo\";\n\nfunction App() {\n  let [todos, setTodos] = React.useState([\n    { id: 1, completed: false, title: \"Купить хлеб\" },\n    { id: 2, completed: true, title: \"Купить молоко\" },\n    { id: 3, completed: false, title: \"Купить квартиру\" },\n  ]);\n\n  function onToggle(id) {\n    setTodos(\n      (todos = todos.map((todo) => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      }))\n    );\n  }\n\n  function removeTodo(id) {\n    setTodos(todos.filter((todo) => todo.id !== id));\n  }\n\n  function addTodo(title) {\n    setTodos(\n      todos.concat([\n        {\n          title,\n          id: Date.now(),\n          completed: false,\n        },\n      ])\n    );\n  }\n\n  return (\n    <Context.Provider value={{ removeTodo }}>\n      <div className=\"App\">\n        <h1 className=\"color\">React</h1>\n        <AddTodo onCreate={addTodo}></AddTodo>\n\n        {todos.length ? <TodoList todos={todos} onToggle={onToggle}></TodoList> : <p>Nothing Todo</p>}\n      </div>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}